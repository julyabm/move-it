{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\ReactJS\\\\moveit-next\\\\src\\\\contexts\\\\ChallengesContext.tsx\";\nimport { createContext, useState, useEffect } from 'react';\nimport challenges from '../../challenges.json';\nexport const ChallengesContext = /*#__PURE__*/createContext({});\nexport function ChallengesProvider({\n  children\n}) {\n  const {\n    0: level,\n    1: setLevel\n  } = useState(1);\n  const {\n    0: currentExperience,\n    1: setCurrentExperience\n  } = useState(0);\n  const {\n    0: challengesCompleted,\n    1: setChallengesCompleted\n  } = useState(0);\n  const {\n    0: activeChallenge,\n    1: setActiveChallenge\n  } = useState(null);\n  const experienceToNextLevel = Math.pow((level + 1) * 4, 2);\n  useEffect(() => {\n    Notification.requestPermission();\n  }, []);\n\n  function levelUp() {\n    setLevel(level + 1);\n  }\n\n  function startNewChallenge() {\n    const ramdomChallengeIndex = Math.floor(Math.random() * challenges.length);\n    const challenge = challenges[ramdomChallengeIndex];\n    setActiveChallenge(challenge);\n\n    if (Notification.permission == 'granted') {\n      new Notification('Novo desafio ðŸŽ‰');\n    }\n  }\n\n  function resetChallenge() {\n    setActiveChallenge(null);\n  }\n\n  function completeChallenge() {\n    if (!activeChallenge) {\n      return;\n    }\n\n    const {\n      amount\n    } = activeChallenge;\n    let finalExperience = currentExperience + amount;\n\n    if (finalExperience >= experienceToNextLevel) {\n      finalExperience = finalExperience - experienceToNextLevel;\n      levelUp();\n    }\n\n    setCurrentExperience(finalExperience);\n    setActiveChallenge(null);\n    setChallengesCompleted(challengesCompleted + 1);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ChallengesContext.Provider, {\n    value: {\n      level,\n      currentExperience,\n      experienceToNextLevel,\n      challengesCompleted,\n      levelUp,\n      startNewChallenge,\n      activeChallenge,\n      resetChallenge,\n      completeChallenge\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["C:/ReactJS/moveit-next/src/contexts/ChallengesContext.tsx"],"names":["createContext","useState","useEffect","challenges","ChallengesContext","ChallengesProvider","children","level","setLevel","currentExperience","setCurrentExperience","challengesCompleted","setChallengesCompleted","activeChallenge","setActiveChallenge","experienceToNextLevel","Math","pow","Notification","requestPermission","levelUp","startNewChallenge","ramdomChallengeIndex","floor","random","length","challenge","permission","resetChallenge","completeChallenge","amount","finalExperience"],"mappings":";;AAAA,SAASA,aAAT,EAAwBC,QAAxB,EAA6CC,SAA7C,QAA8D,OAA9D;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AAyBA,OAAO,MAAMC,iBAAiB,gBAAGJ,aAAa,CAAC,EAAD,CAAvC;AAEP,OAAO,SAASK,kBAAT,CAA4B;AAACC,EAAAA;AAAD,CAA5B,EAAgE;AACnE,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAkBP,QAAQ,CAAC,CAAD,CAAhC;AACA,QAAM;AAAA,OAACQ,iBAAD;AAAA,OAAmBC;AAAnB,MAA2CT,QAAQ,CAAC,CAAD,CAAzD;AACA,QAAM;AAAA,OAACU,mBAAD;AAAA,OAAsBC;AAAtB,MAAgDX,QAAQ,CAAC,CAAD,CAA9D;AAEA,QAAM;AAAA,OAACY,eAAD;AAAA,OAAkBC;AAAlB,MAAwCb,QAAQ,CAAC,IAAD,CAAtD;AAEA,QAAMc,qBAAqB,GAAGC,IAAI,CAACC,GAAL,CAAS,CAACV,KAAK,GAAC,CAAP,IAAW,CAApB,EAAuB,CAAvB,CAA9B;AAEAL,EAAAA,SAAS,CAAC,MAAM;AACZgB,IAAAA,YAAY,CAACC,iBAAb;AACH,GAFQ,EAEN,EAFM,CAAT;;AAIA,WAASC,OAAT,GAAkB;AACdZ,IAAAA,QAAQ,CAACD,KAAK,GAAC,CAAP,CAAR;AACH;;AAED,WAASc,iBAAT,GAA4B;AACxB,UAAOC,oBAAoB,GAAGN,IAAI,CAACO,KAAL,CAAWP,IAAI,CAACQ,MAAL,KAAgBrB,UAAU,CAACsB,MAAtC,CAA9B;AACA,UAAMC,SAAS,GAAGvB,UAAU,CAACmB,oBAAD,CAA5B;AAEAR,IAAAA,kBAAkB,CAACY,SAAD,CAAlB;;AAEA,QAAIR,YAAY,CAACS,UAAb,IAA2B,SAA/B,EAA0C;AACtC,UAAIT,YAAJ,CAAiB,iBAAjB;AACH;AACJ;;AAED,WAASU,cAAT,GAAyB;AACrBd,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACH;;AAED,WAASe,iBAAT,GAA4B;AACxB,QAAI,CAAChB,eAAL,EAAsB;AAClB;AACH;;AAED,UAAM;AAACiB,MAAAA;AAAD,QAAWjB,eAAjB;AAEA,QAAIkB,eAAe,GAAGtB,iBAAiB,GAAGqB,MAA1C;;AAEA,QAAIC,eAAe,IAAIhB,qBAAvB,EAA6C;AACzCgB,MAAAA,eAAe,GAAGA,eAAe,GAAEhB,qBAAnC;AACAK,MAAAA,OAAO;AACV;;AAEDV,IAAAA,oBAAoB,CAACqB,eAAD,CAApB;AACAjB,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACAF,IAAAA,sBAAsB,CAACD,mBAAmB,GAAC,CAArB,CAAtB;AACH;;AAEF,sBACC,QAAC,iBAAD,CAAmB,QAAnB;AACA,IAAA,KAAK,EAAE;AACHJ,MAAAA,KADG;AAEHE,MAAAA,iBAFG;AAGHM,MAAAA,qBAHG;AAIHJ,MAAAA,mBAJG;AAKHS,MAAAA,OALG;AAMHC,MAAAA,iBANG;AAOHR,MAAAA,eAPG;AAQHe,MAAAA,cARG;AASHC,MAAAA;AATG,KADP;AAAA,cAYKvB;AAZL;AAAA;AAAA;AAAA;AAAA,UADD;AAgBF","sourcesContent":["import { createContext, useState, ReactNode, useEffect } from 'react';\r\nimport challenges from '../../challenges.json';\r\n\r\ninterface Challenge {\r\n    type: 'body' | 'eye';\r\n    description: string;\r\n    amount: number;\r\n}\r\n\r\n\r\ninterface ChallengesContextData {\r\n    level: number;\r\n    currentExperience: number;\r\n    experienceToNextLevel: number;\r\n    challengesCompleted: number;\r\n    activeChallenge: Challenge;\r\n    levelUp: () => void;\r\n    startNewChallenge: () => void;\r\n    resetChallenge: () => void;\r\n    completeChallenge: () => void;\r\n}\r\n\r\ninterface ChallengesProviderProps{\r\n    children: ReactNode;\r\n}\r\n\r\nexport const ChallengesContext = createContext({} as ChallengesContextData);\r\n\r\nexport function ChallengesProvider({children}: ChallengesProviderProps){\r\n    const [level, setLevel]=useState(1);\r\n    const [currentExperience,setCurrentExperience] = useState(0);\r\n    const [challengesCompleted, setChallengesCompleted] = useState(0);\r\n\r\n    const [activeChallenge, setActiveChallenge] = useState(null);\r\n\r\n    const experienceToNextLevel = Math.pow((level+1)* 4, 2);\r\n\r\n    useEffect(() => {\r\n        Notification.requestPermission();\r\n    }, [])\r\n\r\n    function levelUp(){\r\n        setLevel(level+1);\r\n    }\r\n\r\n    function startNewChallenge(){\r\n        const  ramdomChallengeIndex = Math.floor(Math.random() * challenges.length)\r\n        const challenge = challenges[ramdomChallengeIndex];\r\n\r\n        setActiveChallenge(challenge)\r\n        \r\n        if (Notification.permission == 'granted') {\r\n            new Notification('Novo desafio ðŸŽ‰')\r\n        }\r\n    }\r\n\r\n    function resetChallenge(){\r\n        setActiveChallenge(null);\r\n    }\r\n\r\n    function completeChallenge(){\r\n        if (!activeChallenge) { \r\n            return; \r\n        }\r\n\r\n        const {amount} = activeChallenge;\r\n\r\n        let finalExperience = currentExperience + amount;\r\n\r\n        if (finalExperience >= experienceToNextLevel){\r\n            finalExperience = finalExperience -experienceToNextLevel;\r\n            levelUp();\r\n        }  \r\n        \r\n        setCurrentExperience(finalExperience);\r\n        setActiveChallenge(null);\r\n        setChallengesCompleted(challengesCompleted+1);\r\n    }\r\n\r\n   return (\r\n    <ChallengesContext.Provider \r\n    value={{\r\n        level, \r\n        currentExperience, \r\n        experienceToNextLevel,\r\n        challengesCompleted, \r\n        levelUp,\r\n        startNewChallenge,\r\n        activeChallenge,\r\n        resetChallenge,\r\n        completeChallenge,\r\n         }}>\r\n        {children}\r\n    </ChallengesContext.Provider>\r\n   ) \r\n} \r\n\r\n"]},"metadata":{},"sourceType":"module"}