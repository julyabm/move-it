{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\ReactJS\\\\moveit-next\\\\src\\\\contexts\\\\ChallengesContext.tsx\";\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { createContext, useState, useEffect } from 'react';\nimport Cookies from 'js-cookie';\nimport challenges from '../../challenges.json';\nimport { LevelUpModal } from '../components/LevelUpModal';\nexport const ChallengesContext = /*#__PURE__*/createContext({});\nexport function ChallengesProvider(_ref) {\n  var _rest$level, _rest$currentExperien, _rest$challengesCompl;\n\n  let {\n    children\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, [\"children\"]);\n\n  const {\n    0: level,\n    1: setLevel\n  } = useState((_rest$level = rest.level) !== null && _rest$level !== void 0 ? _rest$level : 1);\n  const {\n    0: currentExperience,\n    1: setCurrentExperience\n  } = useState((_rest$currentExperien = rest.currentExperience) !== null && _rest$currentExperien !== void 0 ? _rest$currentExperien : 0);\n  const {\n    0: challengesCompleted,\n    1: setChallengesCompleted\n  } = useState((_rest$challengesCompl = rest.challengesCompleted) !== null && _rest$challengesCompl !== void 0 ? _rest$challengesCompl : 0);\n  const {\n    0: activeChallenge,\n    1: setActiveChallenge\n  } = useState(null);\n  const {\n    0: isLevelUpModalOpen,\n    1: setIsLevelUpModalOpen\n  } = useState(false);\n  const experienceToNextLevel = Math.pow((level + 1) * 4, 2);\n  useEffect(() => {\n    Notification.requestPermission();\n  }, []);\n\n  function levelUp() {\n    setLevel(level + 1);\n    setIsLevelUpModalOpen(true);\n  } //cokies\n\n\n  useEffect(() => {\n    Cookies.set('level', String(level));\n    Cookies.set('currentExperience', String(currentExperience));\n    Cookies.set('challengesCompleted', String(challengesCompleted));\n  }, [level, currentExperience, challengesCompleted]);\n\n  function startNewChallenge() {\n    const ramdomChallengeIndex = Math.floor(Math.random() * challenges.length);\n    const challenge = challenges[ramdomChallengeIndex];\n    setActiveChallenge(challenge);\n    new Audio('/notification.mp3').play();\n\n    if (Notification.permission == 'granted') {\n      new Notification('Novo desafio ðŸŽ‰', {\n        body: `Valendo ${challenge.amount}xp`\n      });\n    }\n  }\n\n  function resetChallenge() {\n    setActiveChallenge(null);\n  }\n\n  function completeChallenge() {\n    if (!activeChallenge) {\n      return;\n    }\n\n    const {\n      amount\n    } = activeChallenge;\n    let finalExperience = currentExperience + amount;\n\n    if (finalExperience >= experienceToNextLevel) {\n      finalExperience = finalExperience - experienceToNextLevel;\n      levelUp();\n    }\n\n    setCurrentExperience(finalExperience);\n    setActiveChallenge(null);\n    setChallengesCompleted(challengesCompleted + 1);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ChallengesContext.Provider, {\n    value: {\n      level,\n      currentExperience,\n      experienceToNextLevel,\n      challengesCompleted,\n      levelUp,\n      startNewChallenge,\n      activeChallenge,\n      resetChallenge,\n      completeChallenge\n    },\n    children: [children, isLevelUpModalOpen && /*#__PURE__*/_jsxDEV(LevelUpModal, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 33\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["C:/ReactJS/moveit-next/src/contexts/ChallengesContext.tsx"],"names":["createContext","useState","useEffect","Cookies","challenges","LevelUpModal","ChallengesContext","ChallengesProvider","children","rest","level","setLevel","currentExperience","setCurrentExperience","challengesCompleted","setChallengesCompleted","activeChallenge","setActiveChallenge","isLevelUpModalOpen","setIsLevelUpModalOpen","experienceToNextLevel","Math","pow","Notification","requestPermission","levelUp","set","String","startNewChallenge","ramdomChallengeIndex","floor","random","length","challenge","Audio","play","permission","body","amount","resetChallenge","completeChallenge","finalExperience"],"mappings":"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","sourcesContent":["import { createContext, useState, ReactNode, useEffect } from 'react';\r\nimport Cookies from 'js-cookie';\r\nimport challenges from '../../challenges.json';\r\nimport { LevelUpModal } from '../components/LevelUpModal';\r\n\r\ninterface Challenge {\r\n    type: 'body' | 'eye';\r\n    description: string;\r\n    amount: number;\r\n}\r\n\r\ninterface ChallengesContextData {\r\n    level: number;\r\n    currentExperience: number;\r\n    experienceToNextLevel: number;\r\n    challengesCompleted: number;\r\n    activeChallenge: Challenge;\r\n    levelUp: () => void;\r\n    startNewChallenge: () => void;\r\n    resetChallenge: () => void;\r\n    completeChallenge: () => void;\r\n}\r\n\r\ninterface ChallengesProviderProps{\r\n    children: ReactNode;\r\n    level: number;\r\n    currentExperience: number;\r\n    challengesCompleted: number;\r\n}\r\n\r\nexport const ChallengesContext = createContext({} as ChallengesContextData);\r\n\r\nexport function ChallengesProvider({children, ...rest}\r\n    : ChallengesProviderProps){\r\n    const [level, setLevel]=useState(rest.level ?? 1);\r\n    const [currentExperience,setCurrentExperience] = useState(rest.currentExperience ?? 0);\r\n    const [challengesCompleted, setChallengesCompleted] = useState(rest.challengesCompleted ?? 0);\r\n\r\n    const [activeChallenge, setActiveChallenge] = useState(null);\r\n    const [isLevelUpModalOpen, setIsLevelUpModalOpen] = useState(false);\r\n\r\n    const experienceToNextLevel = Math.pow((level+1)* 4, 2);\r\n\r\n    useEffect(() => {\r\n        Notification.requestPermission();\r\n    }, [])\r\n\r\n    function levelUp(){\r\n        setLevel(level+1);\r\n        setIsLevelUpModalOpen(true);\r\n    }\r\n\r\n    //cokies\r\n    useEffect(() => {\r\n        Cookies.set('level', String(level));\r\n        Cookies.set('currentExperience', String(currentExperience));\r\n        Cookies.set('challengesCompleted', String(challengesCompleted));\r\n    }, [level, currentExperience, challengesCompleted]);\r\n\r\n    function startNewChallenge(){\r\n        const  ramdomChallengeIndex = Math.floor(Math.random() * challenges.length)\r\n        const challenge = challenges[ramdomChallengeIndex];\r\n\r\n        setActiveChallenge(challenge)\r\n\r\n        new Audio('/notification.mp3').play();\r\n        \r\n        if (Notification.permission == 'granted') {\r\n            new Notification('Novo desafio ðŸŽ‰', { \r\n                body: `Valendo ${challenge.amount}xp`\r\n            })\r\n        }\r\n    }\r\n\r\n    function resetChallenge(){\r\n        setActiveChallenge(null);\r\n    }\r\n\r\n    function completeChallenge(){\r\n        if (!activeChallenge) { \r\n            return; \r\n        }\r\n\r\n        const {amount} = activeChallenge;\r\n\r\n        let finalExperience = currentExperience + amount;\r\n\r\n        if (finalExperience >= experienceToNextLevel){\r\n            finalExperience = finalExperience -experienceToNextLevel;\r\n            levelUp();\r\n        }  \r\n        \r\n        setCurrentExperience(finalExperience);\r\n        setActiveChallenge(null);\r\n        setChallengesCompleted(challengesCompleted+1);\r\n    }\r\n\r\n   return (\r\n    <ChallengesContext.Provider \r\n    value={{\r\n        level, \r\n        currentExperience, \r\n        experienceToNextLevel,\r\n        challengesCompleted, \r\n        levelUp,\r\n        startNewChallenge,\r\n        activeChallenge,\r\n        resetChallenge,\r\n        completeChallenge,\r\n         }}>\r\n        {children}\r\n\r\n        { isLevelUpModalOpen && <LevelUpModal />}\r\n            </ChallengesContext.Provider>\r\n   ) \r\n} \r\n\r\n"]},"metadata":{},"sourceType":"module"}