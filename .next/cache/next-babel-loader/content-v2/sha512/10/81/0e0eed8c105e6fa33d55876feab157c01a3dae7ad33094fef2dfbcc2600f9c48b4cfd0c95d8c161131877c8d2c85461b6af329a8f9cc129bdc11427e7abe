{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\ReactJS\\\\moveit-next\\\\src\\\\contexts\\\\ChallengesContext.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState } from 'react';\nimport challenges from '../../challenges.json';\nexport var ChallengesContext = /*#__PURE__*/createContext({});\nexport function ChallengesProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useState = useState(1),\n      level = _useState[0],\n      setLevel = _useState[1];\n\n  var _useState2 = useState(0),\n      currentExperience = _useState2[0],\n      setCurrentExperience = _useState2[1];\n\n  var _useState3 = useState(0),\n      challengesCompleted = _useState3[0],\n      setChallengesCompleted = _useState3[1];\n\n  var _useState4 = useState(null),\n      activeChallenge = _useState4[0],\n      setActiveChallenge = _useState4[1];\n\n  function levelUp() {\n    setLevel(level + 1);\n  }\n\n  function startNewChallenge() {\n    var ramdomChallengeIndex = Math.floor(Math.random() * challenges.length);\n    var challenge = challenges[ramdomChallengeIndex];\n    setActiveChallenge(challenge);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ChallengesContext.Provider, {\n    value: {\n      level: level,\n      currentExperience: currentExperience,\n      challengesCompleted: challengesCompleted,\n      levelUp: levelUp,\n      startNewChallenge: startNewChallenge,\n      activeChallenge: activeChallenge\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ChallengesProvider, \"IHTarZw2nVXOcBSmGui1JufnXNE=\");\n\n_c = ChallengesProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChallengesProvider\");","map":{"version":3,"sources":["C:/ReactJS/moveit-next/src/contexts/ChallengesContext.tsx"],"names":["createContext","useState","challenges","ChallengesContext","ChallengesProvider","children","level","setLevel","currentExperience","setCurrentExperience","challengesCompleted","setChallengesCompleted","activeChallenge","setActiveChallenge","levelUp","startNewChallenge","ramdomChallengeIndex","Math","floor","random","length","challenge"],"mappings":";;;;;AAAA,SAASA,aAAT,EAAwBC,QAAxB,QAAmD,OAAnD;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AAsBA,OAAO,IAAMC,iBAAiB,gBAAGH,aAAa,CAAC,EAAD,CAAvC;AAEP,OAAO,SAASI,kBAAT,OAAgE;AAAA;;AAAA,MAAnCC,QAAmC,QAAnCA,QAAmC;;AAAA,kBAC3CJ,QAAQ,CAAC,CAAD,CADmC;AAAA,MAC5DK,KAD4D;AAAA,MACrDC,QADqD;;AAAA,mBAElBN,QAAQ,CAAC,CAAD,CAFU;AAAA,MAE5DO,iBAF4D;AAAA,MAE1CC,oBAF0C;;AAAA,mBAGbR,QAAQ,CAAC,CAAD,CAHK;AAAA,MAG5DS,mBAH4D;AAAA,MAGvCC,sBAHuC;;AAAA,mBAKrBV,QAAQ,CAAC,IAAD,CALa;AAAA,MAK5DW,eAL4D;AAAA,MAK3CC,kBAL2C;;AAOnE,WAASC,OAAT,GAAkB;AACdP,IAAAA,QAAQ,CAACD,KAAK,GAAC,CAAP,CAAR;AACH;;AAED,WAASS,iBAAT,GAA4B;AACxB,QAAOC,oBAAoB,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBjB,UAAU,CAACkB,MAAtC,CAA9B;AACA,QAAMC,SAAS,GAAGnB,UAAU,CAACc,oBAAD,CAA5B;AAEAH,IAAAA,kBAAkB,CAACQ,SAAD,CAAlB;AACH;;AAEF,sBACC,QAAC,iBAAD,CAAmB,QAAnB;AACA,IAAA,KAAK,EAAE;AACHf,MAAAA,KAAK,EAALA,KADG;AAEHE,MAAAA,iBAAiB,EAAjBA,iBAFG;AAGHE,MAAAA,mBAAmB,EAAnBA,mBAHG;AAIHI,MAAAA,OAAO,EAAPA,OAJG;AAKHC,MAAAA,iBAAiB,EAAjBA,iBALG;AAMHH,MAAAA,eAAe,EAAfA;AANG,KADP;AAAA,cASKP;AATL;AAAA;AAAA;AAAA;AAAA,UADD;AAaF;;GA/BeD,kB;;KAAAA,kB","sourcesContent":["import { createContext, useState, ReactNode } from 'react';\r\nimport challenges from '../../challenges.json';\r\n\r\ninterface Challenge {\r\n    type: 'body' | 'eye';\r\n    description: string;\r\n    amount: number;\r\n}\r\n\r\n\r\ninterface ChallengesContextData {\r\n    level: number;\r\n    currentExperience: number;\r\n    challengesCompleted: number;\r\n    activeChallenge: Challenge;\r\n    levelUp: () => void;\r\n    startNewChallenge: () => void;\r\n}\r\n\r\ninterface ChallengesProviderProps{\r\n    children: ReactNode;\r\n}\r\n\r\nexport const ChallengesContext = createContext({} as ChallengesContextData);\r\n\r\nexport function ChallengesProvider({children}: ChallengesProviderProps){\r\n    const [level, setLevel]=useState(1);\r\n    const [currentExperience,setCurrentExperience] = useState(0);\r\n    const [challengesCompleted, setChallengesCompleted] = useState(0);\r\n\r\n    const [activeChallenge, setActiveChallenge] = useState(null);\r\n\r\n    function levelUp(){\r\n        setLevel(level+1);\r\n    }\r\n\r\n    function startNewChallenge(){\r\n        const  ramdomChallengeIndex = Math.floor(Math.random() * challenges.length)\r\n        const challenge = challenges[ramdomChallengeIndex];\r\n\r\n        setActiveChallenge(challenge)\r\n    }\r\n\r\n   return (\r\n    <ChallengesContext.Provider \r\n    value={{\r\n        level, \r\n        currentExperience, \r\n        challengesCompleted, \r\n        levelUp,\r\n        startNewChallenge,\r\n        activeChallenge,\r\n         }}>\r\n        {children}\r\n    </ChallengesContext.Provider>\r\n   ) \r\n} \r\n\r\n"]},"metadata":{},"sourceType":"module"}